// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: goprotoarchetype/v1/goprotoarchetype.proto

package goprotoarchetypev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoprotoarchetypeServiceClient is the client API for GoprotoarchetypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoprotoarchetypeServiceClient interface {
	// HelloWorld is the default rpc. Feel free to delete.
	HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error)
}

type goprotoarchetypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoprotoarchetypeServiceClient(cc grpc.ClientConnInterface) GoprotoarchetypeServiceClient {
	return &goprotoarchetypeServiceClient{cc}
}

func (c *goprotoarchetypeServiceClient) HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error) {
	out := new(HelloWorldResponse)
	err := c.cc.Invoke(ctx, "/goprotoarchetype.v1.GoprotoarchetypeService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoprotoarchetypeServiceServer is the server API for GoprotoarchetypeService service.
// All implementations must embed UnimplementedGoprotoarchetypeServiceServer
// for forward compatibility
type GoprotoarchetypeServiceServer interface {
	// HelloWorld is the default rpc. Feel free to delete.
	HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error)
	mustEmbedUnimplementedGoprotoarchetypeServiceServer()
}

// UnimplementedGoprotoarchetypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoprotoarchetypeServiceServer struct {
}

func (UnimplementedGoprotoarchetypeServiceServer) HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedGoprotoarchetypeServiceServer) mustEmbedUnimplementedGoprotoarchetypeServiceServer() {
}

// UnsafeGoprotoarchetypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoprotoarchetypeServiceServer will
// result in compilation errors.
type UnsafeGoprotoarchetypeServiceServer interface {
	mustEmbedUnimplementedGoprotoarchetypeServiceServer()
}

func RegisterGoprotoarchetypeServiceServer(s grpc.ServiceRegistrar, srv GoprotoarchetypeServiceServer) {
	s.RegisterService(&GoprotoarchetypeService_ServiceDesc, srv)
}

func _GoprotoarchetypeService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoprotoarchetypeServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goprotoarchetype.v1.GoprotoarchetypeService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoprotoarchetypeServiceServer).HelloWorld(ctx, req.(*HelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoprotoarchetypeService_ServiceDesc is the grpc.ServiceDesc for GoprotoarchetypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoprotoarchetypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goprotoarchetype.v1.GoprotoarchetypeService",
	HandlerType: (*GoprotoarchetypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _GoprotoarchetypeService_HelloWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goprotoarchetype/v1/goprotoarchetype.proto",
}
